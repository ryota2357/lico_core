use std::str::FromStr;

xflags::xflags! {
    src "./src/flags.rs"

    cmd xtask {
        cmd codegen {
            optional kind: CodegenKind
        }
    }
}
// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Xtask {
    pub subcommand: XtaskCmd,
}

#[derive(Debug)]
pub enum XtaskCmd {
    Codegen(Codegen),
}

#[derive(Debug)]
pub struct Codegen {
    pub kind: Option<CodegenKind>,
}

impl Xtask {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end

#[derive(Debug, Default)]
pub enum CodegenKind {
    #[default]
    All,
    Syntax,
    Parser,
}

impl FromStr for CodegenKind {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "all" => Ok(CodegenKind::All),
            "syntax" => Ok(CodegenKind::Syntax),
            "parser" => Ok(CodegenKind::Parser),
            unknown => Err(format!("Unknown codegen kind: {}", unknown)),
        }
    }
}
